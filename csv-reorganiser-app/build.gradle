/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.14.2/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'eclipse'
    id 'com.gradleup.shadow' version '9.0.0-beta17'
    id 'jacoco'
}

eclipse {
	project {
		name = 'csv-reorganiser-app'
	}
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

configurations {
    mockitoAgent
}
dependencies {
	// Apache commons
	implementation "commons-cli:commons-cli:1.9.0"
	implementation "org.apache.commons:commons-csv:1.14.0"
	implementation "commons-io:commons-io:2.19.0"
	implementation "org.apache.commons:commons-lang3:3.17.0"
	implementation "org.apache.logging.log4j:log4j-core:2.25.0"
	// Others
	implementation "org.reflections:reflections:0.10.2"
	implementation "org.yaml:snakeyaml:2.4"
	implementation "com.github.javaparser:javaparser-core:3.27.0"
    implementation libs.guava

    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter
	testImplementation "org.hamcrest:hamcrest:3.0"
	testImplementation libs.mockito
	mockitoAgent(libs.mockito) {
        transitive = false
    }
    testImplementation "org.mockito:mockito-junit-jupiter:2.19.0"
   
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	// Since reflections includes an old slf4j version, nop is added to remove the log messages
	runtimeOnly 'org.slf4j:slf4j-nop:2.0.17'

}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'com.github.sylordis.csvreorganiser.CSVReorganiserCLIMain'
}

/*tasks.named('test') {
    // Use JUnit Platform for unit tests.
}
*/
test {
    jvmArgs += "-javaagent:${configurations.mockitoAgent.asPath}"
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jar {
    manifest {
        attributes 'Main-Class': 'com.github.sylordis.csvreorganiser.CSVReorganiserCLIMain'
    }
}
 